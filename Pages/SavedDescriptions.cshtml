@page
@model JobDescriptionAgent.Pages.SavedDescriptionsModel
@{
    ViewData["Title"] = "Saved Job Descriptions";
}

<div class="container mt-4">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <div>
            <a asp-page="/Index" class="text-decoration-none">
                <i class="fas fa-home me-2"></i>Back to Home
            </a>
            <h1 class="mt-2">@ViewData["Title"]</h1>
            <p class="text-muted">
                <i class="fas fa-sort-amount-down me-2"></i>Sorted by creation date (newest first)
            </p>
        </div>
        <a asp-page="/Index" class="btn btn-primary">
            <i class="fas fa-plus me-2"></i>Create New
        </a>
    </div>

    @if (!string.IsNullOrEmpty(Model.ErrorMessage))
    {
        <div class="alert alert-danger" role="alert">
            @Model.ErrorMessage
        </div>
    }

    @if (TempData["SuccessMessage"] != null)
    {
        <div class="alert alert-success" role="alert">
            @TempData["SuccessMessage"]
        </div>
    }

    <div class="mb-3">
        <label for="jobSelect" class="form-label">Select Job Description:</label>
        <select class="form-select" id="jobSelect" onchange="onJobSelect()">
            @if (Model.SavedDescriptions.Any())
            {
                foreach (var jd in Model.SavedDescriptions)
                {
                    <option value="@jd.Id">@jd.Title</option>
                }
            }
            <option value="ALL">Query JD templates</option>
        </select>
    </div>
    <div id="jobDescriptionChatContainer" class="row">
        <div class="col-md-7">
            <div id="jobDescriptionContainer">
                @if (Model.SavedDescriptions.Any())
                {
                    foreach (var jd in Model.SavedDescriptions)
                    {
                        <div class="job-description-card" id="job-@jd.Id" style="display:none;">
                            <div class="card h-100 shadow-sm mb-4">
                                <div class="card-header d-flex justify-content-between align-items-center">
                                    <h5 class="mb-0">@jd.Title</h5>
                                    <small class="text-muted">
                                        <i class="fas fa-calendar me-1"></i>
                                        @jd.CreatedAt.ToString("MMM dd, yyyy HH:mm")
                                    </small>
                                </div>
                                <div class="card-body">
                                    <p class="card-text text-muted mb-3">Initial Input:</p>
                                    <p class="card-text">@jd.InitialInput</p>
                                    <hr />
                                    <p class="card-text text-muted mb-3">Generated Description:</p>
                                    <p class="card-text">@jd.Description</p>
                                </div>
                                <div class="card-footer bg-transparent">
                                    <div class="d-flex justify-content-between align-items-center">
                                        <button class="btn btn-outline-primary btn-sm" onclick="copyToClipboard('@jd.Description')">
                                            <i class="fas fa-copy me-2"></i>Copy
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                }
                else
                {
                    <div class="alert alert-info" role="alert">
                        No saved job descriptions found. You can still use the chat to query the default JD template.
                    </div>
                }
            </div>
        </div>
        <div class="col-md-5">
            <div class="chat-window mt-4">
                <h6>Ask about this Job Description:</h6>
                <div id="chat-history" class="chat-history border rounded p-2 mb-2" style="height:300px; overflow-y:auto;"></div>
                <div class="input-group">
                    <input type="text" class="form-control" id="chat-input" placeholder="Type your question..." onkeydown="if(event.key==='Enter'){ sendChat(); }">
                    <button class="btn btn-primary" type="button" onclick="sendChat()">Send</button>
                </div>
                <div class="form-text mt-2">Select "Query JD templates" to query across all job descriptions or use the chat for the default template.</div>
            </div>
        </div>
    </div>
    <script>
        // Show only the selected job description
        function onJobSelect() {
            var select = document.getElementById('jobSelect');
            var selectedId = select.value;
            var cards = document.querySelectorAll('.job-description-card');
            cards.forEach(card => card.style.display = 'none');
            var selectedCard = document.getElementById('job-' + selectedId);
            if (selectedCard) selectedCard.style.display = 'block';
            // Clear chat history when switching jobs
            document.getElementById('chat-history').innerHTML = '';
        }
        document.addEventListener('DOMContentLoaded', function() {
            onJobSelect(); // Show first by default
        });

        // Chat functionality
        function sendChat() {
            var select = document.getElementById('jobSelect');
            var jobId = select.value;
            var input = document.getElementById('chat-input');
            var historyDiv = document.getElementById('chat-history');
            var query = input.value.trim();
            console.log('Sending query: ' + query);
            if (!query) return;
            // Append user message
            var userMsg = document.createElement('div');
            userMsg.className = 'mb-1 text-end';
            userMsg.innerHTML = '<span class="badge bg-primary">You:</span> ' + query;
            historyDiv.appendChild(userMsg);
            input.value = '';
            // Call backend
            var fetchUrl = '';
            if (jobId === 'ALL') {
                fetchUrl = `/api/queryproxy?job_id=${encodeURIComponent(0)}&query=${encodeURIComponent(query)}`;
            } else {
                fetchUrl = `/api/queryproxy?job_id=${encodeURIComponent(jobId)}&query=${encodeURIComponent(query)}`;
            }
            fetch(fetchUrl, { method: 'POST' })
            .then(async res => {
                if (!res.ok) {
                    let errorText = await res.text();
                    throw new Error(errorText || 'Server error');
                }
                const text = await res.text();
                if (!text) {
                    throw new Error('Empty response from server');
                }
                return JSON.parse(text);
            })
            .then(data => {
                var botMsg = document.createElement('div');
                botMsg.className = 'mb-1 text-start';
                botMsg.innerHTML = '<span class="badge bg-secondary">Bot:</span> ' + (data.answer || 'No answer');
                historyDiv.appendChild(botMsg);
                historyDiv.scrollTop = historyDiv.scrollHeight;
            })
            .catch(err => {
                var errMsg = document.createElement('div');
                errMsg.className = 'mb-1 text-danger';
                errMsg.innerHTML = '<span class="badge bg-danger">Error:</span> ' + err.message;
                historyDiv.appendChild(errMsg);
            });
        }
    </script>
</div>

@section Scripts {
    <script>
        function copyToClipboard(text) {
            navigator.clipboard.writeText(text).then(() => {
                alert('Copied to clipboard!');
            }).catch(err => {
                console.error('Failed to copy text: ', err);
            });
        }
    </script>
} 